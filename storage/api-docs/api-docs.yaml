openapi: 3.0.0
info:
  title: 'MLS API'
  version: 1.0.0
paths:
  /api/tele-app/properties:
    get:
      tags:
        - Properties
      summary: 'Get list of property'
      description: 'Returns list of property'
      operationId: index
      parameters:
        -
          name: collection
          in: query
          description: "If set to true, it will only return user's collection"
          required: false
          schema:
            type: boolean
        -
          name: 'price[min]'
          in: query
          description: 'Minimum price'
          required: false
          schema:
            type: integer
        -
          name: 'price[max]'
          in: query
          description: 'Maximum price'
          required: false
          schema:
            type: integer
        -
          name: type
          in: query
          description: 'Property type'
          required: false
          schema:
            type: string
            enum:
              - house
              - apartment
              - land
        -
          name: bedroomCount
          in: query
          description: 'Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: bathroomCount
          in: query
          description: 'Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'lotSize[min]'
          in: query
          description: 'Minimum lot size'
          required: false
          schema:
            type: integer
        -
          name: 'lotSize[max]'
          in: query
          description: 'Maximum lot size'
          required: false
          schema:
            type: integer
        -
          name: 'buildingSize[min]'
          in: query
          description: 'Minimum building size'
          required: false
          schema:
            type: integer
        -
          name: 'buildingSize[max]'
          in: query
          description: 'Maximum building size'
          required: false
          schema:
            type: integer
        -
          name: ownership
          in: query
          description: Ownership
          required: false
          schema:
            type: string
            enum:
              - shm
              - hgb
              - girik
              - lainnya
        -
          name: carCount
          in: query
          description: 'Car count'
          required: false
          schema:
            type: integer
        -
          name: electricPower
          in: query
          description: 'Electric Power'
          required: false
          schema:
            type: integer
        -
          name: sort
          in: query
          description: 'Sort By'
          required: false
          schema:
            type: string
            enum:
              - price
              - bedroomCount
              - lotSize
        -
          name: order
          in: query
          description: 'Order By'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  properties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                type: object
    post:
      tags:
        - Properties
      summary: 'Create property'
      operationId: create
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PropertyRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
  '/api/tele-app/properties/{id}':
    get:
      tags:
        - Properties
      summary: 'Get property by id'
      operationId: show
      parameters:
        -
          name: id
          in: path
          description: 'Property Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        404:
          description: 'Property not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Property not found'
                type: object
    post:
      tags:
        - Properties
      summary: 'Update property'
      operationId: update
      parameters:
        -
          name: id
          in: path
          description: 'Property Id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PropertyRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        404:
          description: 'Property not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Property not found'
                type: object
    delete:
      tags:
        - Properties
      summary: 'Delete property'
      operationId: delete
      parameters:
        -
          name: id
          in: path
          description: 'Property Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Property deleted successfully'
                type: object
  /api/tele-app/users/profile:
    get:
      tags:
        - 'Telegram Users'
      summary: 'Get profile'
      description: 'Returns user profile'
      operationId: profile
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramUserProfile'
    post:
      tags:
        - 'Telegram Users'
      summary: 'Update profile'
      operationId: updateProfile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TelegramUserProfileRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramUserProfile'
components:
  schemas:
    PropertyRequest:
      properties:
        title:
          type: string
          example: 'Rumah dijual di daerah pasteur'
        address:
          type: string
          example: 'Jl. Pendidikan No. 1'
        description:
          type: string
          example: 'Rumah bagus'
        price:
          type: integer
          example: 100000
        lotSize:
          type: integer
          example: 1000
        buildingSize:
          type: integer
          example: 2000
        carCount:
          type: integer
          example: 4
        bedroomCount:
          type: integer
          example: 3
        bathroomCount:
          type: integer
          example: 2
        floorCount:
          type: integer
          example: 2
        electricPower:
          type: integer
          example: 2200
        facing:
          type: string
          example: Utara
        ownership:
          type: string
          example: SHM
        city:
          type: string
          example: Bandung
        pictureUrls:
          type: array
          items:
            oneOf:
              -
                type: string
                format: binary
                example: \x00\x00\x00\x04\x00\x00\x00\x04
              -
                type: string
                format: url
                example: 'https://example.com/image.jpg'
        coordinate:
          properties:
            latitude:
              type: integer
            longitude:
              type: integer
          type: object
        contacts:
          properties:
            name:
              type: string
            profilePictureURL:
              type: string
            phoneNumber:
              type: string
            sourceURL:
              type: string
            provider:
              type: string
          type: object
        isPrivate:
          type: boolean
          example: false
      type: object
    TelegramUserProfileRequest:
      properties:
        name:
          type: string
          example: 'Jono Doe'
        phoneNumber:
          type: string
          example: '081111111111'
        city:
          type: string
          example: Surabaya
        description:
          type: string
          example: 'Agen terpercaya'
        company:
          type: string
          example: 'Agen XXX'
        picture:
          type: string
          format: binary
          example: \x00\x00\x00\x04\x00\x00\x00\x04
      type: object
    Property:
      properties:
        id:
          type: string
        title:
          type: string
        address:
          type: string
        description:
          type: string
        price:
          type: integer
        lotSize:
          type: integer
        buildingSize:
          type: integer
        carCount:
          type: integer
        bedroomCount:
          type: integer
        bathroomCount:
          type: integer
        floorCount:
          type: integer
        electricPower:
          type: integer
        facing:
          type: string
        ownership:
          type: string
        city:
          type: string
        pictureUrls:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/image.jpg'
        coordinate:
          properties:
            latitude:
              type: integer
            longitude:
              type: integer
          type: object
        contacts:
          properties:
            name:
              type: string
            profilePictureURL:
              type: string
            phoneNumber:
              type: string
            sourceURL:
              type: string
            provider:
              type: string
          type: object
        user:
          properties:
            name:
              type: string
            profilePictureURL:
              type: string
            phoneNumber:
              type: string
          type: object
        userCanEdit:
          type: boolean
        isPrivate:
          type: boolean
      type: object
    TelegramUserProfile:
      properties:
        id:
          type: integer
          example: '123'
        name:
          type: string
          example: 'John Doe'
        phoneNumber:
          type: string
          example: '0811111'
        city:
          type: string
          example: 'New York'
        description:
          type: string
          example: 'I am a programmer'
        pricture:
          type: string
          example: 'https://example.com/image.jpg'
        company:
          type: string
          example: Google
      type: object

openapi: 3.0.0
info:
  title: 'Daftar Properti API'
  version: 1.0.0
paths:
  /api/auth/send-otp:
    post:
      tags:
        - Auth
      summary: 'Send OTP'
      operationId: auth.send_otp
      parameters:
        -
          name: phoneNumber
          in: path
          description: 'Phone Number'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  token:
                    description: 'JWT Token used for authentication'
                    type: string
                  timestamp:
                    description: 'Timestamp of when the OTP was created'
                    type: integer
                    format: int64
                  totp:
                    description: 'If TOTP is enabled'
                    type: boolean
                type: object
  /api/auth/verify-otp:
    post:
      tags:
        - Auth
      summary: 'Verify OTP'
      operationId: auth.verify_otp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - phoneNumber
                - token
                - timestamp
                - otpCode
              properties:
                phoneNumber:
                  description: 'User phone number'
                  type: string
                token:
                  description: 'Token to verify'
                  type: string
                timestamp:
                  description: 'Timestamp of when the OTP was created'
                  type: integer
                  format: int64
                otpCode:
                  description: "User's OTP Code"
                  type: string
              type: object
      responses:
        200:
          description: 'Success response'
          content:
            application/json:
              schema:
                properties:
                  success:
                    description: 'Verify status'
                    type: boolean
                    example: true
                  accessToken:
                    description: 'Access token'
                    type: string
                    example: Akoasdk131o3ipIaskdlz
                  user:
                    $ref: '#/components/schemas/User'
                type: object
  /api/auth/logout:
    post:
      tags:
        - Auth
      summary: Logout
      operationId: auth.logout
      responses:
        200:
          description: 'Success response'
          content:
            application/json:
              schema:
                properties:
                  success:
                    description: 'Logout status'
                    type: boolean
                    example: true
                type: object
        404:
          description: 'Token not found response'
          content:
            application/json:
              schema:
                properties:
                  success:
                    description: 'Logout status'
                    type: boolean
                    example: false
                type: object
      security:
        -
          bearerAuth: []
  /api/auth/impersonate:
    post:
      tags:
        - Auth
      summary: Impersonate
      operationId: auth.impersonate
      parameters:
        -
          name: phoneNumber
          in: path
          description: 'Phone Number'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Success response'
          content:
            application/json:
              schema:
                properties:
                  success:
                    description: 'Verify status'
                    type: boolean
                    example: true
                  accessToken:
                    description: 'Access token'
                    type: string
                    example: Akoasdk131o3ipIaskdlz
                  user:
                    $ref: '#/components/schemas/User'
                type: object
  /api/auth/verify-totp:
    post:
      tags:
        - Auth
      summary: 'Verify TOTP'
      operationId: auth.verify_totp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - phoneNumber
                - totpCode
              properties:
                phoneNumber:
                  description: "User's phone number"
                  type: string
                totpCode:
                  description: "User's TOTP Code"
                  type: string
              type: object
      responses:
        200:
          description: 'Success response'
          content:
            application/json:
              schema:
                properties:
                  success:
                    description: 'Verify status'
                    type: boolean
                    example: true
                  accessToken:
                    description: 'Access token'
                    type: string
                    example: Akoasdk131o3ipIaskdlz
                  user:
                    $ref: '#/components/schemas/User'
                type: object
  /api/app/cities:
    get:
      tags:
        - Cities
      summary: 'Get cities'
      description: 'Returns city items'
      operationId: cities.index
      parameters:
        -
          name: q
          in: query
          description: 'Search city by keyword'
          required: false
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  cities:
                    type: array
                    items:
                      $ref: '#/components/schemas/City'
                type: object
  '/api/app/cities/{id}':
    get:
      tags:
        - Cities
      summary: 'Get city by id'
      operationId: cities.getCityById
      parameters:
        -
          name: id
          in: path
          description: 'City Id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
        404:
          description: 'City not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'City not found'
                type: object
  '/api/app/listings/{id}/closings':
    post:
      tags:
        - Listings
      summary: 'Add a closing to a listing'
      operationId: listings.closing
      parameters:
        -
          name: id
          in: path
          description: 'Listing Id'
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/schemas/ClosingRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
  /api/app/listings:
    get:
      tags:
        - Listings
      summary: 'Get listing items'
      description: 'Returns listing items'
      operationId: listings.index
      parameters:
        -
          name: q
          in: query
          description: 'Search listing by keyword'
          required: false
          schema:
            type: string
        -
          name: collection
          in: query
          description: "If set to true, it will only return user's collection"
          required: false
          schema:
            type: boolean
        -
          name: 'price[min]'
          in: query
          description: 'Minimum price'
          required: false
          schema:
            type: integer
        -
          name: 'price[max]'
          in: query
          description: 'Maximum price'
          required: false
          schema:
            type: integer
        -
          name: 'rentPrice[min]'
          in: query
          description: 'Minimum rent price'
          required: false
          schema:
            type: integer
        -
          name: 'rentPrice[max]'
          in: query
          description: 'Maximum rent price'
          required: false
          schema:
            type: integer
        -
          name: propertyType
          in: query
          description: 'Property type'
          required: false
          schema:
            $ref: '#/components/schemas/PropertyType'
        -
          name: listingForSale
          in: query
          description: 'Listing for sale'
          required: false
          schema:
            type: boolean
        -
          name: listingForRent
          in: query
          description: 'Listing for rent'
          required: false
          schema:
            type: boolean
        -
          name: bedroomCount
          in: query
          description: 'Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bedroomCount[min]'
          in: query
          description: 'Minimum Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bedroomCount[max]'
          in: query
          description: 'Maximum Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: additionalBedroomCount
          in: query
          description: 'Additional Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: bathroomCount
          in: query
          description: 'Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bathroomCount[min]'
          in: query
          description: 'Minimum Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bathroomCount[max]'
          in: query
          description: 'Maximum Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: additionalBathroomCount
          in: query
          description: 'Additional Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'lotSize[min]'
          in: query
          description: 'Minimum lot size'
          required: false
          schema:
            type: integer
        -
          name: 'lotSize[max]'
          in: query
          description: 'Maximum lot size'
          required: false
          schema:
            type: integer
        -
          name: 'buildingSize[min]'
          in: query
          description: 'Minimum building size'
          required: false
          schema:
            type: integer
        -
          name: 'buildingSize[max]'
          in: query
          description: 'Maximum building size'
          required: false
          schema:
            type: integer
        -
          name: ownership
          in: query
          description: Ownership
          required: false
          schema:
            $ref: '#/components/schemas/PropertyOwnership'
        -
          name: carCount
          in: query
          description: 'Car count'
          required: false
          schema:
            type: integer
        -
          name: 'carCount[min]'
          in: query
          description: 'Minimum Car count'
          required: false
          schema:
            type: integer
        -
          name: 'carCount[max]'
          in: query
          description: 'Maximum Car count'
          required: false
          schema:
            type: integer
        -
          name: electricPower
          in: query
          description: 'Electric Power'
          required: false
          schema:
            type: integer
        -
          name: cityId
          in: query
          description: 'City Id'
          required: false
          schema:
            type: integer
        -
          name: sort
          in: query
          description: 'Sort By'
          required: false
          schema:
            $ref: '#/components/schemas/ListingSort'
        -
          name: order
          in: query
          description: 'Order By'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: expiredAt
          in: query
          description: 'Filter or sort by expiration date'
          required: false
          schema:
            type: string
            format: date-time
            example: '2021-12-15T00:00:00Z'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  listings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Listing'
                type: object
    post:
      tags:
        - Listings
      summary: 'Create listing'
      operationId: listings.create
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
  '/api/app/listings/{id}':
    get:
      tags:
        - Listings
      summary: 'Get listing by id'
      operationId: listings.show
      parameters:
        -
          name: id
          in: path
          description: 'Listing Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        404:
          description: 'Listing not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Listing not found'
                type: object
    post:
      tags:
        - Listings
      summary: 'Update listing'
      operationId: listings.update
      parameters:
        -
          name: id
          in: path
          description: 'Listing Id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        404:
          description: 'Listing not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Listing not found'
                type: object
    delete:
      tags:
        - Listings
      summary: 'Delete listing'
      operationId: listings.delete
      parameters:
        -
          name: id
          in: path
          description: 'Listing Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Listing deleted successfully'
                type: object
  /api/app/listings/generate-from-text:
    post:
      tags:
        - Listings
      summary: 'Generate Listing from Text'
      operationId: listings.generateFromText
      parameters:
        -
          name: text
          in: path
          description: 'Listing Message'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  jobId:
                    type: string
                    example: sample-result-id-1
                type: object
  /api/app/listings/getGenerateResult:
    post:
      tags:
        - Listings
      summary: 'Get Generate Listing Result'
      operationId: listings.getGenerateResult
      parameters:
        -
          name: jobId
          in: path
          description: 'Generate Listing Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  generatedListing:
                    $ref: '#/components/schemas/Listing'
                type: object
  '/api/app/listings/{id}/likely-connected':
    post:
      tags:
        - Listings
      summary: 'Get Likely Connected Listing'
      operationId: listings.likely-connected
      parameters:
        -
          name: id
          in: path
          description: 'Listing Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  connectedListings:
                    type: array
                    items:
                      properties:
                        id:
                          type: string
                          example: listing-id-1
                        title:
                          type: string
                          example: title-1
                      type: object
                type: object
  /api/app/upload/image:
    post:
      tags:
        - Image
      summary: 'Upload Image'
      operationId: image.upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageUploadRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  fileId:
                    type: integer
                    example: 123
                  fileName:
                    type: string
                    example: image.jpg
                type: object
  /api/app/properties:
    get:
      tags:
        - Properties
      summary: 'Get list of property'
      description: 'Returns list of property'
      operationId: index
      parameters:
        -
          name: q
          in: query
          description: 'Search property by keyword'
          required: false
          schema:
            type: string
        -
          name: 'price[min]'
          in: query
          description: 'Minimum price'
          required: false
          schema:
            type: integer
        -
          name: 'price[max]'
          in: query
          description: 'Maximum price'
          required: false
          schema:
            type: integer
        -
          name: 'rentPrice[min]'
          in: query
          description: 'Minimum rent price'
          required: false
          schema:
            type: integer
        -
          name: 'rentPrice[max]'
          in: query
          description: 'Maximum rent price'
          required: false
          schema:
            type: integer
        -
          name: propertyType
          in: query
          description: 'Property type'
          required: false
          schema:
            $ref: '#/components/schemas/PropertyType'
        -
          name: listingForSale
          in: query
          description: 'Listing for sale'
          required: false
          schema:
            type: boolean
        -
          name: listingForRent
          in: query
          description: 'Listing for rent'
          required: false
          schema:
            type: boolean
        -
          name: bedroomCount
          in: query
          description: 'Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bedroomCount[min]'
          in: query
          description: 'Minimum Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bedroomCount[max]'
          in: query
          description: 'Maximum Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: bathroomCount
          in: query
          description: 'Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bathroomCount[min]'
          in: query
          description: 'Minimum Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bathroomCount[max]'
          in: query
          description: 'Maximum Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'lotSize[min]'
          in: query
          description: 'Minimum lot size'
          required: false
          schema:
            type: integer
        -
          name: 'lotSize[max]'
          in: query
          description: 'Maximum lot size'
          required: false
          schema:
            type: integer
        -
          name: 'buildingSize[min]'
          in: query
          description: 'Minimum building size'
          required: false
          schema:
            type: integer
        -
          name: 'buildingSize[max]'
          in: query
          description: 'Maximum building size'
          required: false
          schema:
            type: integer
        -
          name: ownership
          in: query
          description: Ownership
          required: false
          schema:
            $ref: '#/components/schemas/PropertyOwnership'
        -
          name: carCount
          in: query
          description: 'Car count'
          required: false
          schema:
            type: integer
        -
          name: 'carCount[min]'
          in: query
          description: 'Minimum Car count'
          required: false
          schema:
            type: integer
        -
          name: 'carCount[max]'
          in: query
          description: 'Maximum Car count'
          required: false
          schema:
            type: integer
        -
          name: electricPower
          in: query
          description: 'Electric Power'
          required: false
          schema:
            type: integer
        -
          name: cityId
          in: query
          description: 'City Id'
          required: false
          schema:
            type: integer
        -
          name: sort
          in: query
          description: 'Sort By'
          required: false
          schema:
            $ref: '#/components/schemas/ListingSort'
        -
          name: order
          in: query
          description: 'Order By'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  properties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                type: object
  '/api/app/properties/{id}':
    get:
      tags:
        - Properties
      summary: 'Get property by id'
      operationId: show
      parameters:
        -
          name: id
          in: path
          description: 'Property Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        404:
          description: 'Property not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Property not found'
                type: object
  /api/app/saved-searches:
    get:
      tags:
        - 'Saved Searches'
      summary: 'Get saved search items'
      description: 'Returns saved search items'
      operationId: saved_searches.index
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  saved_searches:
                    type: array
                    items:
                      $ref: '#/components/schemas/SavedSearch'
                type: object
    post:
      tags:
        - 'Saved Searches'
      summary: 'Create saved search'
      operationId: saved_searches.create
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SavedSearchRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Saved search created successfully'
                type: object
  '/api/app/saved-searches/{id}':
    get:
      tags:
        - 'Saved Searches'
      summary: 'Get saved search by id'
      operationId: saved_searches.show
      parameters:
        -
          name: id
          in: path
          description: 'Saved Search Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedSearch'
        404:
          description: 'Saved search not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Saved search not found'
                type: object
    post:
      tags:
        - 'Saved Searches'
      summary: 'Update saved searches'
      operationId: saved_searches.update
      parameters:
        -
          name: id
          in: path
          description: 'Saved Searches Id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SavedSearchRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Saved search updated successfully'
                type: object
        404:
          description: 'Saved search not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Saved search not found'
                type: object
    delete:
      tags:
        - 'Saved Searches'
      summary: 'Delete saved searches'
      operationId: saved_searches.delete
      parameters:
        -
          name: id
          in: path
          description: 'Saved Searches Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Saved search deleted successfully'
                type: object
        404:
          description: 'Saved search not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Saved search not found'
                type: object
  /api/app/users/profile:
    get:
      tags:
        - Users
      summary: 'Get profile'
      description: 'Returns user profile'
      operationId: profile
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: 'Update profile'
      operationId: updateProfile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfileRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/app/users/secret-key:
    post:
      tags:
        - Users
      summary: 'Generate Secret Key for TOTP'
      operationId: generateSecretKey
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - Users
      summary: 'Delete Secret Key for TOTP'
      operationId: deleteSecretKey
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    ClosingRequest:
      properties:
        closingType:
          $ref: '#/components/schemas/ClosingType'
        clientName:
          type: string
        clientPhoneNumber:
          type: string
        transactionValue:
          type: integer
        date:
          type: string
          format: date
      type: object
    ImageUploadRequest:
      properties:
        image:
          type: string
          format: binary
      type: object
    ListingRequest:
      properties:
        title:
          type: string
          example: 'Rumah dijual di daerah pasteur'
        address:
          type: string
          example: 'Jl. Pendidikan No. 1'
        description:
          type: string
          example: 'Rumah bagus'
        price:
          type: integer
          example: 100000
        rentPrice:
          type: integer
          example: 40000
        lotSize:
          type: integer
          example: 1000
        buildingSize:
          type: integer
          example: 2000
        carCount:
          type: integer
          example: 4
        bedroomCount:
          type: integer
          example: 3
        additionalBedroomCount:
          type: integer
          example: 3
        bathroomCount:
          type: integer
          example: 2
        additionalBathroomCount:
          type: integer
          example: 2
        floorCount:
          type: integer
          example: 2
        electricPower:
          type: integer
          example: 2200
        facing:
          type: string
          example: Utara
        ownership:
          type: string
          example: SHM
        city:
          type: string
          example: Bandung
        cityId:
          type: integer
          example: 1
        listingType:
          $ref: '#/components/schemas/ListingType'
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        listingForRent:
          type: boolean
          example: false
        listingForSale:
          type: boolean
          example: false
        pictureUrls:
          type: array
          items:
            oneOf:
              -
                type: string
                format: binary
                example: !!binary AAAABAAAAAQ=
              -
                type: string
                format: url
                example: 'https://example.com/image.jpg'
        coordinate:
          properties:
            latitude:
              type: integer
            longitude:
              type: integer
          type: object
        isPrivate:
          type: boolean
          example: false
        withRewardAgreement:
          type: boolean
          example: true
        isMultipleUnits:
          type: boolean
          example: true
      type: object
    SavedSearchRequest:
      properties:
        title:
          type: string
          example: 'Pak Eko'
        filterSet:
          $ref: '#/components/schemas/FilterSet'
      type: object
    UserProfileRequest:
      properties:
        name:
          type: string
          example: 'Jono Doe'
        phoneNumber:
          type: string
          example: '081111111111'
        city:
          type: string
          example: Surabaya
        cityId:
          type: integer
          example: 123
        cityName:
          type: string
          example: Surabaya
        description:
          type: string
          example: 'Agen terpercaya'
        company:
          type: string
          example: 'Agen XXX'
        picture:
          type: string
          format: binary
          example: !!binary AAAABAAAAAQ=
        isPublicProfile:
          type: boolean
          example: 'true'
      type: object
    AccountType:
      description: 'Account type'
      type: string
      enum:
        - individual
        - professional
      example: professional
    AdminNote:
      properties:
        email:
          type: string
          example: john@doe.web
        message:
          type: string
          example: 'Hello World'
        date:
          type: string
          format: date-time
      type: object
    CancellationNote:
      properties:
        reason:
          type: string
          example: 'Hello World'
        status:
          type: string
          example: on_review
      type: object
    ActiveStatus:
      type: string
      enum:
        - waitlisted
        - active
        - archived
      example: waitlisted
    AiReviewStatus:
      description: 'AiReview Status'
      type: string
      enum:
        - processing
        - done
      example: done
    CancellationStatus:
      type: string
      enum:
        - on_review
        - approved
        - rejected
      example: on_review
    ClosingStatus:
      description: 'Closing Status'
      type: string
      enum:
        - on_review
        - approved
        - rejected
      example: approved
    ClosingType:
      description: 'Closing Type'
      type: string
      enum:
        - sold
        - rented
      example: sold
    CommissionStatus:
      description: 'Commission Status'
      type: string
      enum:
        - pending
        - paid
        - unpaid
      example: paid
    VerifyStatus:
      description: 'Verification status'
      type: string
      enum:
        - on_review
        - approved
        - rejected
      example: approved
    FacingDirection:
      description: 'Facing Direction'
      type: string
      enum:
        - unknown
        - north
        - east
        - south
        - west
        - northeast
        - southeast
        - southwest
        - northwest
      example: east
    FilterMinMax:
      description: 'Filter Min Max'
      properties:
        min:
          description: 'Minimum value'
          type: integer
          nullable: true
        max:
          description: 'Maximum value'
          type: integer
          nullable: true
      type: object
    FilterSet:
      description: 'Filter Set'
      properties:
        userId:
          description: 'User ID'
          type: integer
          nullable: true
        q:
          description: Query
          type: string
          nullable: true
        collection:
          description: Collection
          type: boolean
          nullable: true
        price:
          $ref: '#/components/schemas/FilterMinMax'
        rentPrice:
          $ref: '#/components/schemas/FilterMinMax'
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        listingType:
          $ref: '#/components/schemas/ListingType'
        listingForSale:
          type: boolean
          nullable: true
        listingForRent:
          type: boolean
          nullable: true
        bedroomCount:
          $ref: '#/components/schemas/FilterMinMax'
        bathroomCount:
          $ref: '#/components/schemas/FilterMinMax'
        lotSize:
          $ref: '#/components/schemas/FilterMinMax'
        buildingSize:
          $ref: '#/components/schemas/FilterMinMax'
        facing:
          $ref: '#/components/schemas/FacingDirection'
        ownership:
          $ref: '#/components/schemas/PropertyOwnership'
        carCount:
          $ref: '#/components/schemas/FilterMinMax'
        floorCount:
          description: 'Floor Count'
          type: integer
          nullable: true
        electricPower:
          description: 'Electric Power'
          type: integer
          nullable: true
        sort:
          description: Sort
          type: string
          nullable: true
        order:
          description: Order
          type: string
          nullable: true
        city:
          description: City
          type: string
          nullable: true
        cityId:
          description: 'City (OSM) ID'
          type: integer
          nullable: true
      type: object
    ListingSort:
      description: 'Sort Listing By'
      type: string
      enum:
        - price
        - bedroomCount
        - bathroomCount
        - lotSize
        - buildingSize
      example: price
    ListingType:
      description: 'Listing type'
      type: string
      enum:
        - unknown
        - sale
        - rent
      example: house
    PropertyOwnership:
      description: 'Property ownership/certificate'
      type: string
      enum:
        - unknown
        - shm
        - hgb
        - strata
        - girik
      example: shm
    PropertyType:
      description: 'Property type'
      type: string
      enum:
        - unknown
        - house
        - apartment
        - warehouse
        - shophouse
        - land
        - villa
      example: house
    City:
      properties:
        id:
          type: integer
        name:
          type: string
        latitude:
          type: integer
        longitude:
          type: integer
      type: object
    Closing:
      properties:
        id:
          type: string
          example: 6asdasd
        listingId:
          type: string
          example: '15000'
        closingType:
          $ref: '#/components/schemas/ClosingType'
        clientName:
          type: string
          example: 'John Doe'
        clientPhoneNumber:
          type: string
          example: '+6281234567890'
        transactionValue:
          type: integer
          example: 100000
        date:
          type: string
          format: date-time
          example: '2024-03-01T23:00:00+00:00'
        notes:
          type: string
          example: Notes
        status:
          $ref: '#/components/schemas/ClosingStatus'
        commissionStatus:
          $ref: '#/components/schemas/CommissionStatus'
      type: object
    Listing:
      properties:
        id:
          type: string
        listingId:
          type: integer
        listingIdStr:
          type: string
        sourceText:
          type: string
        title:
          type: string
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        listingType:
          $ref: '#/components/schemas/ListingType'
        listingForSale:
          type: boolean
        listingForRent:
          type: boolean
        address:
          type: string
        description:
          type: string
        price:
          type: integer
        rentPrice:
          type: integer
        lotSize:
          type: integer
        buildingSize:
          type: integer
        carCount:
          type: integer
        bedroomCount:
          type: integer
        additionalBedroomCount:
          type: integer
        bathroomCount:
          type: integer
        additionalBathroomCount:
          type: integer
        floorCount:
          type: integer
        electricPower:
          type: integer
        viewCount:
          type: integer
        matchFilterCount:
          type: integer
        facing:
          $ref: '#/components/schemas/FacingDirection'
        ownership:
          $ref: '#/components/schemas/PropertyOwnership'
        verifyStatus:
          $ref: '#/components/schemas/VerifyStatus'
        activeStatus:
          $ref: '#/components/schemas/ActiveStatus'
        adminNote:
          $ref: '#/components/schemas/AdminNote'
        cancellationNote:
          $ref: '#/components/schemas/CancellationNote'
        cityName:
          type: string
        cityId:
          type: integer
        city:
          type: string
        pictureUrls:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/image.jpg'
        coordinate:
          properties:
            latitude:
              type: integer
            longitude:
              type: integer
          type: object
        contact:
          properties:
            name:
              type: string
            company:
              type: string
          type: object
        user:
          properties:
            name:
              type: string
            phoneNumber:
              type: string
            profilePictureURL:
              type: string
            city:
              type: string
            cityId:
              type: integer
            cityName:
              type: string
            company:
              type: string
            description:
              type: string
          type: object
        userCanEdit:
          type: boolean
        isPrivate:
          type: boolean
        withRewardAgreement:
          type: boolean
        isMultipleUnits:
          type: boolean
        closings:
          type: array
          items:
            $ref: '#/components/schemas/Closing'
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        expiredAt:
          type: string
          format: date-time
        rawExpiredAt:
          type: string
          format: date-time
      type: object
    Property:
      properties:
        id:
          type: string
        sourceText:
          type: string
        title:
          type: string
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        listingType:
          $ref: '#/components/schemas/ListingType'
        listingForSale:
          type: boolean
        listingForRent:
          type: boolean
        address:
          type: string
        description:
          type: string
        price:
          type: integer
        rentPrice:
          type: integer
        lotSize:
          type: integer
        buildingSize:
          type: integer
        carCount:
          type: integer
        bedroomCount:
          type: integer
        bathroomCount:
          type: integer
        floorCount:
          type: integer
        electricPower:
          type: integer
        facing:
          $ref: '#/components/schemas/FacingDirection'
        ownership:
          $ref: '#/components/schemas/PropertyOwnership'
        verifyStatus:
          $ref: '#/components/schemas/VerifyStatus'
        cityId:
          type: integer
        cityName:
          type: string
        city:
          type: string
        pictureUrls:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/image.jpg'
        coordinate:
          properties:
            latitude:
              type: integer
            longitude:
              type: integer
          type: object
        updatedAt:
          type: string
          format: date-time
        listings:
          type: array
          items:
            $ref: '#/components/schemas/Listing'
      type: object
    PublicListing:
      description: 'Representation of a Listing which is available publicly.'
      properties:
        listingId:
          type: integer
        listingIdStr:
          type: string
        title:
          type: string
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        listingForSale:
          type: boolean
        listingForRent:
          type: boolean
        address:
          type: string
        description:
          type: string
        price:
          type: integer
        rentPrice:
          type: integer
        lotSize:
          type: integer
        buildingSize:
          type: integer
        carCount:
          type: integer
        bedroomCount:
          type: integer
        bathroomCount:
          type: integer
        floorCount:
          type: integer
        electricPower:
          type: integer
        facing:
          $ref: '#/components/schemas/FacingDirection'
        ownership:
          $ref: '#/components/schemas/PropertyOwnership'
        isVerified:
          type: boolean
        cityName:
          type: string
        cityId:
          type: integer
        pictureUrls:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/image.jpg'
        coordinate:
          properties:
            latitude:
              type: integer
            longitude:
              type: integer
          type: object
        updatedAt:
          type: string
          format: date-time
      type: object
    SavedSearch:
      properties:
        id:
          type: string
        userId:
          type: integer
        title:
          type: string
        filterSet:
          $ref: '#/components/schemas/FilterSet'
      type: object
    User:
      properties:
        id:
          type: string
        userId:
          type: integer
        userIdStr:
          type: string
        publicId:
          type: string
        username:
          type: string
        phoneNumber:
          type: string
        accountType:
          $ref: '#/components/schemas/AccountType'
        email:
          type: string
        name:
          type: string
        city:
          type: string
        cityId:
          type: integer
        cityName:
          type: string
        description:
          type: string
        picture:
          type: string
        company:
          type: string
        isPublicProfile:
          type: boolean
        secretKey:
          type: string
      type: object
    UserProfile:
      properties:
        name:
          type: string
          example: 'John Doe'
          nullable: true
        phoneNumber:
          type: string
          example: '+6281234567890'
          nullable: true
        city:
          type: string
          example: Jakarta
          nullable: true
        cityId:
          type: integer
          example: 1
          nullable: true
        cityName:
          type: string
          example: Jakarta
          nullable: true
        description:
          type: string
          example: 'Lorem ipsum'
          nullable: true
        company:
          type: string
          example: 'Company Name'
          nullable: true
        picture:
          type: string
          example: 'https://example.com/image.jpg'
          nullable: true
        isPublicProfile:
          type: boolean
          example: true
          nullable: true
      type: object

openapi: 3.0.0
info:
  title: 'Daftar Properti API'
  version: 1.0.0
paths:
  /api/auth/send-otp:
    post:
      tags:
        - Auth
      summary: 'Send OTP'
      operationId: auth.send_otp
      parameters:
        -
          name: phoneNumber
          in: path
          description: 'Phone Number'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  token:
                    description: 'JWT Token used for authentication'
                    type: string
                  timestamp:
                    description: 'Timestamp of when the OTP was created'
                    type: integer
                    format: int64
                type: object
  /api/auth/verify-otp:
    post:
      tags:
        - Auth
      summary: 'Verify OTP'
      operationId: auth.verify_otp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - phoneNumber
                - token
                - timestamp
                - otpCode
              properties:
                phoneNumber:
                  description: 'User phone number'
                  type: string
                token:
                  description: 'Token to verify'
                  type: string
                timestamp:
                  description: 'Timestamp of when the OTP was created'
                  type: integer
                  format: int64
                otpCode:
                  description: "User's OTP Code"
                  type: string
              type: object
      responses:
        200:
          description: 'Success response'
          content:
            application/json:
              schema:
                properties:
                  success:
                    description: 'Verify status'
                    type: boolean
                    example: true
                  accessToken:
                    description: 'Access token'
                    type: string
                    example: Akoasdk131o3ipIaskdlz
                  user:
                    $ref: '#/components/schemas/User'
                type: object
  /api/tele-app/listings:
    get:
      tags:
        - Listings
      summary: 'Get listing items'
      description: 'Returns listing items'
      operationId: listings.index
      parameters:
        -
          name: q
          in: query
          description: 'Search listing by keyword'
          required: false
          schema:
            type: string
        -
          name: collection
          in: query
          description: "If set to true, it will only return user's collection"
          required: false
          schema:
            type: boolean
        -
          name: 'price[min]'
          in: query
          description: 'Minimum price'
          required: false
          schema:
            type: integer
        -
          name: 'price[max]'
          in: query
          description: 'Maximum price'
          required: false
          schema:
            type: integer
        -
          name: propertyType
          in: query
          description: 'Property type'
          required: false
          schema:
            $ref: '#/components/schemas/PropertyType'
        -
          name: bedroomCount
          in: query
          description: 'Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bedroomCount[min]'
          in: query
          description: 'Minimum Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bedroomCount[max]'
          in: query
          description: 'Maximum Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: bathroomCount
          in: query
          description: 'Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bathroomCount[min]'
          in: query
          description: 'Minimum Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bathroomCount[max]'
          in: query
          description: 'Maximum Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'lotSize[min]'
          in: query
          description: 'Minimum lot size'
          required: false
          schema:
            type: integer
        -
          name: 'lotSize[max]'
          in: query
          description: 'Maximum lot size'
          required: false
          schema:
            type: integer
        -
          name: 'buildingSize[min]'
          in: query
          description: 'Minimum building size'
          required: false
          schema:
            type: integer
        -
          name: 'buildingSize[max]'
          in: query
          description: 'Maximum building size'
          required: false
          schema:
            type: integer
        -
          name: ownership
          in: query
          description: Ownership
          required: false
          schema:
            $ref: '#/components/schemas/PropertyOwnership'
        -
          name: carCount
          in: query
          description: 'Car count'
          required: false
          schema:
            type: integer
        -
          name: 'carCount[min]'
          in: query
          description: 'Minimum Car count'
          required: false
          schema:
            type: integer
        -
          name: 'carCount[max]'
          in: query
          description: 'Maximum Car count'
          required: false
          schema:
            type: integer
        -
          name: electricPower
          in: query
          description: 'Electric Power'
          required: false
          schema:
            type: integer
        -
          name: sort
          in: query
          description: 'Sort By'
          required: false
          schema:
            $ref: '#/components/schemas/ListingSort'
        -
          name: order
          in: query
          description: 'Order By'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  listings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Listing'
                type: object
    post:
      tags:
        - Listings
      summary: 'Create listing'
      operationId: listings.create
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
  '/api/tele-app/listings/{id}':
    get:
      tags:
        - Listings
      summary: 'Get listing by id'
      operationId: listings.show
      parameters:
        -
          name: id
          in: path
          description: 'Listing Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        404:
          description: 'Listing not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Listing not found'
                type: object
    post:
      tags:
        - Listings
      summary: 'Update listing'
      operationId: listings.update
      parameters:
        -
          name: id
          in: path
          description: 'Listing Id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        404:
          description: 'Listing not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Listing not found'
                type: object
    delete:
      tags:
        - Listings
      summary: 'Delete listing'
      operationId: listings.delete
      parameters:
        -
          name: id
          in: path
          description: 'Listing Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Listing deleted successfully'
                type: object
  '/api/photo/{fileId}/{fileName}':
    get:
      tags:
        - Image
      summary: 'Show image'
      operationId: image.show
      parameters:
        -
          name: fileId
          in: path
          description: 'File Id'
          required: true
          schema:
            type: integer
        -
          name: fileName
          in: path
          description: Filename
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'image/*':
              schema:
                type: string
                format: binary
  /api/tele-app/upload/image:
    post:
      tags:
        - Image
      summary: 'Upload Image'
      operationId: image.upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageUploadRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  fileId:
                    type: integer
                    example: 123
                  fileName:
                    type: string
                    example: image.jpg
                type: object
  /api/tele-app/properties:
    get:
      tags:
        - Properties
      summary: 'Get list of property'
      description: 'Returns list of property'
      operationId: index
      parameters:
        -
          name: q
          in: query
          description: 'Search property by keyword'
          required: false
          schema:
            type: string
        -
          name: 'price[min]'
          in: query
          description: 'Minimum price'
          required: false
          schema:
            type: integer
        -
          name: 'price[max]'
          in: query
          description: 'Maximum price'
          required: false
          schema:
            type: integer
        -
          name: propertyType
          in: query
          description: 'Property type'
          required: false
          schema:
            $ref: '#/components/schemas/PropertyType'
        -
          name: bedroomCount
          in: query
          description: 'Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bedroomCount[min]'
          in: query
          description: 'Minimum Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bedroomCount[max]'
          in: query
          description: 'Maximum Bedroom count'
          required: false
          schema:
            type: integer
        -
          name: bathroomCount
          in: query
          description: 'Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bathroomCount[min]'
          in: query
          description: 'Minimum Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'bathroomCount[max]'
          in: query
          description: 'Maximum Bathroom count'
          required: false
          schema:
            type: integer
        -
          name: 'lotSize[min]'
          in: query
          description: 'Minimum lot size'
          required: false
          schema:
            type: integer
        -
          name: 'lotSize[max]'
          in: query
          description: 'Maximum lot size'
          required: false
          schema:
            type: integer
        -
          name: 'buildingSize[min]'
          in: query
          description: 'Minimum building size'
          required: false
          schema:
            type: integer
        -
          name: 'buildingSize[max]'
          in: query
          description: 'Maximum building size'
          required: false
          schema:
            type: integer
        -
          name: ownership
          in: query
          description: Ownership
          required: false
          schema:
            $ref: '#/components/schemas/PropertyOwnership'
        -
          name: carCount
          in: query
          description: 'Car count'
          required: false
          schema:
            type: integer
        -
          name: 'carCount[min]'
          in: query
          description: 'Minimum Car count'
          required: false
          schema:
            type: integer
        -
          name: 'carCount[max]'
          in: query
          description: 'Maximum Car count'
          required: false
          schema:
            type: integer
        -
          name: electricPower
          in: query
          description: 'Electric Power'
          required: false
          schema:
            type: integer
        -
          name: sort
          in: query
          description: 'Sort By'
          required: false
          schema:
            $ref: '#/components/schemas/ListingSort'
        -
          name: order
          in: query
          description: 'Order By'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  properties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                type: object
  '/api/tele-app/properties/{id}':
    get:
      tags:
        - Properties
      summary: 'Get property by id'
      operationId: show
      parameters:
        -
          name: id
          in: path
          description: 'Property Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        404:
          description: 'Property not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Property not found'
                type: object
  /api/tele-app/saved-searches:
    get:
      tags:
        - 'Saved Searches'
      summary: 'Get saved search items'
      description: 'Returns saved search items'
      operationId: saved_searches.index
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  saved_searches:
                    type: array
                    items:
                      $ref: '#/components/schemas/SavedSearch'
                type: object
    post:
      tags:
        - 'Saved Searches'
      summary: 'Create saved search'
      operationId: saved_searches.create
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SavedSearchRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Saved search created successfully'
                type: object
  '/api/tele-app/saved-searches/{id}':
    get:
      tags:
        - 'Saved Searches'
      summary: 'Get saved search by id'
      operationId: saved_searches.show
      parameters:
        -
          name: id
          in: path
          description: 'Saved Search Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedSearch'
        404:
          description: 'Saved search not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Saved search not found'
                type: object
    post:
      tags:
        - 'Saved Searches'
      summary: 'Update saved searches'
      operationId: saved_searches.update
      parameters:
        -
          name: id
          in: path
          description: 'Saved Searches Id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SavedSearchRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Saved search updated successfully'
                type: object
        404:
          description: 'Saved search not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Saved search not found'
                type: object
    delete:
      tags:
        - 'Saved Searches'
      summary: 'Delete saved searches'
      operationId: saved_searches.delete
      parameters:
        -
          name: id
          in: path
          description: 'Saved Searches Id'
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Saved search deleted successfully'
                type: object
        404:
          description: 'Saved search not found'
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: 'Saved search not found'
                type: object
  /api/tele-app/telegram-users/profile:
    get:
      tags:
        - 'Telegram Users'
      summary: 'Get profile'
      description: 'Returns user profile'
      operationId: telegramProfile
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramUserProfile'
    post:
      tags:
        - 'Telegram Users'
      summary: 'Update profile'
      operationId: updateTelegramProfile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TelegramUserProfileRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramUserProfile'
  /api/tele-app/users/profile:
    get:
      tags:
        - 'Telegram Users'
      summary: 'Get profile'
      description: 'Returns user profile'
      operationId: profile
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramUserProfile'
    post:
      tags:
        - 'Telegram Users'
      summary: 'Update profile'
      operationId: updateProfile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TelegramUserProfileRequest'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramUserProfile'
components:
  schemas:
    ImageUploadRequest:
      properties:
        image:
          type: string
          format: binary
      type: object
    ListingRequest:
      properties:
        title:
          type: string
          example: 'Rumah dijual di daerah pasteur'
        address:
          type: string
          example: 'Jl. Pendidikan No. 1'
        description:
          type: string
          example: 'Rumah bagus'
        price:
          type: integer
          example: 100000
        rentPrice:
          type: integer
          example: 40000
        lotSize:
          type: integer
          example: 1000
        buildingSize:
          type: integer
          example: 2000
        carCount:
          type: integer
          example: 4
        bedroomCount:
          type: integer
          example: 3
        bathroomCount:
          type: integer
          example: 2
        floorCount:
          type: integer
          example: 2
        electricPower:
          type: integer
          example: 2200
        facing:
          type: string
          example: Utara
        ownership:
          type: string
          example: SHM
        city:
          type: string
          example: Bandung
        listingType:
          $ref: '#/components/schemas/ListingType'
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        listingForRent:
          type: boolean
          example: false
        listingForSale:
          type: boolean
          example: false
        pictureUrls:
          type: array
          items:
            oneOf:
              -
                type: string
                format: binary
                example: \x00\x00\x00\x04\x00\x00\x00\x04
              -
                type: string
                format: url
                example: 'https://example.com/image.jpg'
        coordinate:
          properties:
            latitude:
              type: integer
            longitude:
              type: integer
          type: object
        isPrivate:
          type: boolean
          example: false
      type: object
    SavedSearchRequest:
      properties:
        title:
          type: string
          example: 'Pak Eko'
        filterSet:
          $ref: '#/components/schemas/FilterSet'
      type: object
    TelegramUserProfileRequest:
      properties:
        name:
          type: string
          example: 'Jono Doe'
        phoneNumber:
          type: string
          example: '081111111111'
        city:
          type: string
          example: Surabaya
        description:
          type: string
          example: 'Agen terpercaya'
        company:
          type: string
          example: 'Agen XXX'
        picture:
          type: string
          format: binary
          example: \x00\x00\x00\x04\x00\x00\x00\x04
        isPublicProfile:
          type: boolean
          example: 'true'
      type: object
    AccountType:
      description: 'Account type'
      type: string
      enum:
        - individual
        - professional
      example: professional
    VerifyStatus:
      description: 'Verification status'
      type: string
      enum:
        - on_review
        - approved
        - rejected
      example: approved
    FacingDirection:
      description: 'Facing Direction'
      type: string
      enum:
        - unknown
        - north
        - east
        - south
        - west
        - northeast
        - southeast
        - southwest
        - northwest
      example: east
    FilterMinMax:
      description: 'Filter Min Max'
      properties:
        min:
          description: 'Minimum value'
          type: integer
          nullable: true
        max:
          description: 'Maximum value'
          type: integer
          nullable: true
      type: object
    FilterSet:
      description: 'Filter Set'
      properties:
        userId:
          description: 'User ID'
          type: integer
          nullable: true
        q:
          description: Query
          type: string
          nullable: true
        collection:
          description: Collection
          type: boolean
          nullable: true
        price:
          $ref: '#/components/schemas/FilterMinMax'
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        listingType:
          $ref: '#/components/schemas/ListingType'
        bedroomCount:
          $ref: '#/components/schemas/FilterMinMax'
        bathroomCount:
          $ref: '#/components/schemas/FilterMinMax'
        lotSize:
          $ref: '#/components/schemas/FilterMinMax'
        buildingSize:
          $ref: '#/components/schemas/FilterMinMax'
        facing:
          $ref: '#/components/schemas/FacingDirection'
        ownership:
          $ref: '#/components/schemas/PropertyOwnership'
        carCount:
          $ref: '#/components/schemas/FilterMinMax'
        floorCount:
          description: 'Floor Count'
          type: integer
          nullable: true
        electricPower:
          description: 'Electric Power'
          type: integer
          nullable: true
        sort:
          description: Sort
          type: string
          nullable: true
        order:
          description: Order
          type: string
          nullable: true
        city:
          description: City
          type: string
          nullable: true
      type: object
    ListingSort:
      description: 'Sort Listing By'
      type: string
      enum:
        - price
        - bedroomCount
        - bathroomCount
        - lotSize
        - buildingSize
      example: price
    ListingType:
      description: 'Listing type'
      type: string
      enum:
        - unknown
        - sale
        - rent
      example: house
    PropertyOwnership:
      description: 'Property ownership/certificate'
      type: string
      enum:
        - unknown
        - shm
        - hgb
        - strata
        - girik
      example: shm
    PropertyType:
      description: 'Property type'
      type: string
      enum:
        - unknown
        - house
        - apartment
        - warehouse
        - shophouse
        - land
        - villa
      example: house
    Listing:
      properties:
        id:
          type: string
        sourceText:
          type: string
        title:
          type: string
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        listingType:
          $ref: '#/components/schemas/ListingType'
        listingForSale:
          type: boolean
        listingForRent:
          type: boolean
        address:
          type: string
        description:
          type: string
        price:
          type: integer
        rentPrice:
          type: integer
        lotSize:
          type: integer
        buildingSize:
          type: integer
        carCount:
          type: integer
        bedroomCount:
          type: integer
        bathroomCount:
          type: integer
        floorCount:
          type: integer
        electricPower:
          type: integer
        viewCount:
          type: integer
        matchFilterCount:
          type: integer
        facing:
          $ref: '#/components/schemas/FacingDirection'
        ownership:
          $ref: '#/components/schemas/PropertyOwnership'
        verifyStatus:
          $ref: '#/components/schemas/VerifyStatus'
        city:
          type: string
        pictureUrls:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/image.jpg'
        coordinate:
          properties:
            latitude:
              type: integer
            longitude:
              type: integer
          type: object
        contact:
          properties:
            name:
              type: string
            phoneNumber:
              type: string
            company:
              type: string
          type: object
        user:
          properties:
            name:
              type: string
            profilePictureURL:
              type: string
            city:
              type: string
            company:
              type: string
            description:
              type: string
            phoneNumber:
              type: string
          type: object
        userCanEdit:
          type: boolean
        isPrivate:
          type: boolean
        updatedAt:
          type: string
          format: date-time
      type: object
    Property:
      properties:
        id:
          type: string
        sourceText:
          type: string
        title:
          type: string
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        listingType:
          $ref: '#/components/schemas/ListingType'
        listingForSale:
          type: boolean
        listingForRent:
          type: boolean
        address:
          type: string
        description:
          type: string
        price:
          type: integer
        rentPrice:
          type: integer
        lotSize:
          type: integer
        buildingSize:
          type: integer
        carCount:
          type: integer
        bedroomCount:
          type: integer
        bathroomCount:
          type: integer
        floorCount:
          type: integer
        electricPower:
          type: integer
        facing:
          $ref: '#/components/schemas/FacingDirection'
        ownership:
          $ref: '#/components/schemas/PropertyOwnership'
        verifyStatus:
          $ref: '#/components/schemas/VerifyStatus'
        city:
          type: string
        pictureUrls:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/image.jpg'
        coordinate:
          properties:
            latitude:
              type: integer
            longitude:
              type: integer
          type: object
        updatedAt:
          type: string
          format: date-time
        listings:
          type: array
          items:
            $ref: '#/components/schemas/Listing'
      type: object
    SavedSearch:
      properties:
        id:
          type: string
        userId:
          type: integer
        title:
          type: string
        filterSet:
          $ref: '#/components/schemas/FilterSet'
      type: object
    TelegramAllowlistGroup:
      properties:
        id:
          type: string
        chatId:
          type: integer
        groupName:
          type: string
        sampleMessage:
          type: string
        allowed:
          type: boolean
        createdAt:
          type: string
      type: object
    TelegramUserProfile:
      properties:
        id:
          type: integer
          example: '123'
        publicId:
          type: string
          example: id-123
        name:
          type: string
          example: 'John Doe'
        phoneNumber:
          type: string
          example: '0811111'
        city:
          type: string
          example: 'New York'
        description:
          type: string
          example: 'I am a programmer'
        pricture:
          type: string
          example: 'https://example.com/image.jpg'
        company:
          type: string
          example: Google
        isPublicProfile:
          type: boolean
          example: true
      type: object
    User:
      properties:
        id:
          type: string
        username:
          type: string
        phoneNumber:
          type: string
        accountType:
          $ref: '#/components/schemas/AccountType'
        email:
          type: string
        name:
          type: string
        city:
          type: string
        description:
          type: string
        picture:
          type: string
        company:
          type: string
        isPublicProfile:
          type: boolean
      type: object
